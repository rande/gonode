// Code generated by go-bindata.
// sources:
// github.com/rande/gonode/modules/blog/templates/nodes/blog.post.tpl
// github.com/rande/gonode/modules/feed/templates/nodes/feed.index.atom.tpl
// github.com/rande/gonode/modules/feed/templates/nodes/feed.index.rss.tpl
// github.com/rande/gonode/modules/media/exif/2004-01-11-22-45-15-sep-2004-01-11-22-45-15a.jpg
// github.com/rande/gonode/modules/media/exif/infinite_loop_exif.jpg
// github.com/rande/gonode/modules/prism/templates/layouts/base.tpl
// github.com/rande/gonode/modules/prism/templates/layouts/error.tpl
// github.com/rande/gonode/modules/prism/templates/pages/bad_request.tpl
// github.com/rande/gonode/modules/prism/templates/pages/internal_error.tpl
// github.com/rande/gonode/modules/prism/templates/pages/not_found.tpl
// github.com/rande/gonode/modules/search/templates/nodes/core.index.tpl
// github.com/rande/gonode/modules/setup/templates/core.setup.base.html.tpl
// github.com/rande/gonode/modules/setup/templates/definitions.toml
// github.com/rande/gonode/explorer/dist/.gitkeep
// DO NOT EDIT!

package assets

import (
	"fmt"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
)

// bindataRead reads the given file from disk. It returns an error on failure.
func bindataRead(path, name string) ([]byte, error) {
	buf, err := ioutil.ReadFile(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset %s at %s: %v", name, path, err)
	}
	return buf, err
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

// githubComRandeGonodeModulesBlogTemplatesNodesBlogPostTpl reads file data from disk. It returns an error on failure.
func githubComRandeGonodeModulesBlogTemplatesNodesBlogPostTpl() (*asset, error) {
	path := filepath.Join(rootDir, "github.com/rande/gonode/modules/blog/templates/nodes/blog.post.tpl")
	name := "github.com/rande/gonode/modules/blog/templates/nodes/blog.post.tpl"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// githubComRandeGonodeModulesFeedTemplatesNodesFeedIndexAtomTpl reads file data from disk. It returns an error on failure.
func githubComRandeGonodeModulesFeedTemplatesNodesFeedIndexAtomTpl() (*asset, error) {
	path := filepath.Join(rootDir, "github.com/rande/gonode/modules/feed/templates/nodes/feed.index.atom.tpl")
	name := "github.com/rande/gonode/modules/feed/templates/nodes/feed.index.atom.tpl"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// githubComRandeGonodeModulesFeedTemplatesNodesFeedIndexRssTpl reads file data from disk. It returns an error on failure.
func githubComRandeGonodeModulesFeedTemplatesNodesFeedIndexRssTpl() (*asset, error) {
	path := filepath.Join(rootDir, "github.com/rande/gonode/modules/feed/templates/nodes/feed.index.rss.tpl")
	name := "github.com/rande/gonode/modules/feed/templates/nodes/feed.index.rss.tpl"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// githubComRandeGonodeModulesMediaExif20040111224515Sep20040111224515aJpg reads file data from disk. It returns an error on failure.
func githubComRandeGonodeModulesMediaExif20040111224515Sep20040111224515aJpg() (*asset, error) {
	path := filepath.Join(rootDir, "github.com/rande/gonode/modules/media/exif/2004-01-11-22-45-15-sep-2004-01-11-22-45-15a.jpg")
	name := "github.com/rande/gonode/modules/media/exif/2004-01-11-22-45-15-sep-2004-01-11-22-45-15a.jpg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// githubComRandeGonodeModulesMediaExifInfinite_loop_exifJpg reads file data from disk. It returns an error on failure.
func githubComRandeGonodeModulesMediaExifInfinite_loop_exifJpg() (*asset, error) {
	path := filepath.Join(rootDir, "github.com/rande/gonode/modules/media/exif/infinite_loop_exif.jpg")
	name := "github.com/rande/gonode/modules/media/exif/infinite_loop_exif.jpg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// githubComRandeGonodeModulesPrismTemplatesLayoutsBaseTpl reads file data from disk. It returns an error on failure.
func githubComRandeGonodeModulesPrismTemplatesLayoutsBaseTpl() (*asset, error) {
	path := filepath.Join(rootDir, "github.com/rande/gonode/modules/prism/templates/layouts/base.tpl")
	name := "github.com/rande/gonode/modules/prism/templates/layouts/base.tpl"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// githubComRandeGonodeModulesPrismTemplatesLayoutsErrorTpl reads file data from disk. It returns an error on failure.
func githubComRandeGonodeModulesPrismTemplatesLayoutsErrorTpl() (*asset, error) {
	path := filepath.Join(rootDir, "github.com/rande/gonode/modules/prism/templates/layouts/error.tpl")
	name := "github.com/rande/gonode/modules/prism/templates/layouts/error.tpl"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// githubComRandeGonodeModulesPrismTemplatesPagesBad_requestTpl reads file data from disk. It returns an error on failure.
func githubComRandeGonodeModulesPrismTemplatesPagesBad_requestTpl() (*asset, error) {
	path := filepath.Join(rootDir, "github.com/rande/gonode/modules/prism/templates/pages/bad_request.tpl")
	name := "github.com/rande/gonode/modules/prism/templates/pages/bad_request.tpl"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// githubComRandeGonodeModulesPrismTemplatesPagesInternal_errorTpl reads file data from disk. It returns an error on failure.
func githubComRandeGonodeModulesPrismTemplatesPagesInternal_errorTpl() (*asset, error) {
	path := filepath.Join(rootDir, "github.com/rande/gonode/modules/prism/templates/pages/internal_error.tpl")
	name := "github.com/rande/gonode/modules/prism/templates/pages/internal_error.tpl"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// githubComRandeGonodeModulesPrismTemplatesPagesNot_foundTpl reads file data from disk. It returns an error on failure.
func githubComRandeGonodeModulesPrismTemplatesPagesNot_foundTpl() (*asset, error) {
	path := filepath.Join(rootDir, "github.com/rande/gonode/modules/prism/templates/pages/not_found.tpl")
	name := "github.com/rande/gonode/modules/prism/templates/pages/not_found.tpl"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// githubComRandeGonodeModulesSearchTemplatesNodesCoreIndexTpl reads file data from disk. It returns an error on failure.
func githubComRandeGonodeModulesSearchTemplatesNodesCoreIndexTpl() (*asset, error) {
	path := filepath.Join(rootDir, "github.com/rande/gonode/modules/search/templates/nodes/core.index.tpl")
	name := "github.com/rande/gonode/modules/search/templates/nodes/core.index.tpl"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// githubComRandeGonodeModulesSetupTemplatesCoreSetupBaseHtmlTpl reads file data from disk. It returns an error on failure.
func githubComRandeGonodeModulesSetupTemplatesCoreSetupBaseHtmlTpl() (*asset, error) {
	path := filepath.Join(rootDir, "github.com/rande/gonode/modules/setup/templates/core.setup.base.html.tpl")
	name := "github.com/rande/gonode/modules/setup/templates/core.setup.base.html.tpl"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// githubComRandeGonodeModulesSetupTemplatesDefinitionsToml reads file data from disk. It returns an error on failure.
func githubComRandeGonodeModulesSetupTemplatesDefinitionsToml() (*asset, error) {
	path := filepath.Join(rootDir, "github.com/rande/gonode/modules/setup/templates/definitions.toml")
	name := "github.com/rande/gonode/modules/setup/templates/definitions.toml"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// githubComRandeGonodeExplorerDistGitkeep reads file data from disk. It returns an error on failure.
func githubComRandeGonodeExplorerDistGitkeep() (*asset, error) {
	path := filepath.Join(rootDir, "github.com/rande/gonode/explorer/dist/.gitkeep")
	name := "github.com/rande/gonode/explorer/dist/.gitkeep"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"github.com/rande/gonode/modules/blog/templates/nodes/blog.post.tpl": githubComRandeGonodeModulesBlogTemplatesNodesBlogPostTpl,
	"github.com/rande/gonode/modules/feed/templates/nodes/feed.index.atom.tpl": githubComRandeGonodeModulesFeedTemplatesNodesFeedIndexAtomTpl,
	"github.com/rande/gonode/modules/feed/templates/nodes/feed.index.rss.tpl": githubComRandeGonodeModulesFeedTemplatesNodesFeedIndexRssTpl,
	"github.com/rande/gonode/modules/media/exif/2004-01-11-22-45-15-sep-2004-01-11-22-45-15a.jpg": githubComRandeGonodeModulesMediaExif20040111224515Sep20040111224515aJpg,
	"github.com/rande/gonode/modules/media/exif/infinite_loop_exif.jpg": githubComRandeGonodeModulesMediaExifInfinite_loop_exifJpg,
	"github.com/rande/gonode/modules/prism/templates/layouts/base.tpl": githubComRandeGonodeModulesPrismTemplatesLayoutsBaseTpl,
	"github.com/rande/gonode/modules/prism/templates/layouts/error.tpl": githubComRandeGonodeModulesPrismTemplatesLayoutsErrorTpl,
	"github.com/rande/gonode/modules/prism/templates/pages/bad_request.tpl": githubComRandeGonodeModulesPrismTemplatesPagesBad_requestTpl,
	"github.com/rande/gonode/modules/prism/templates/pages/internal_error.tpl": githubComRandeGonodeModulesPrismTemplatesPagesInternal_errorTpl,
	"github.com/rande/gonode/modules/prism/templates/pages/not_found.tpl": githubComRandeGonodeModulesPrismTemplatesPagesNot_foundTpl,
	"github.com/rande/gonode/modules/search/templates/nodes/core.index.tpl": githubComRandeGonodeModulesSearchTemplatesNodesCoreIndexTpl,
	"github.com/rande/gonode/modules/setup/templates/core.setup.base.html.tpl": githubComRandeGonodeModulesSetupTemplatesCoreSetupBaseHtmlTpl,
	"github.com/rande/gonode/modules/setup/templates/definitions.toml": githubComRandeGonodeModulesSetupTemplatesDefinitionsToml,
	"github.com/rande/gonode/explorer/dist/.gitkeep": githubComRandeGonodeExplorerDistGitkeep,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"github.com": &bintree{nil, map[string]*bintree{
		"rande": &bintree{nil, map[string]*bintree{
			"gonode": &bintree{nil, map[string]*bintree{
				"explorer": &bintree{nil, map[string]*bintree{
					"dist": &bintree{nil, map[string]*bintree{
						".gitkeep": &bintree{githubComRandeGonodeExplorerDistGitkeep, map[string]*bintree{}},
					}},
				}},
				"modules": &bintree{nil, map[string]*bintree{
					"blog": &bintree{nil, map[string]*bintree{
						"templates": &bintree{nil, map[string]*bintree{
							"nodes": &bintree{nil, map[string]*bintree{
								"blog.post.tpl": &bintree{githubComRandeGonodeModulesBlogTemplatesNodesBlogPostTpl, map[string]*bintree{}},
							}},
						}},
					}},
					"feed": &bintree{nil, map[string]*bintree{
						"templates": &bintree{nil, map[string]*bintree{
							"nodes": &bintree{nil, map[string]*bintree{
								"feed.index.atom.tpl": &bintree{githubComRandeGonodeModulesFeedTemplatesNodesFeedIndexAtomTpl, map[string]*bintree{}},
								"feed.index.rss.tpl": &bintree{githubComRandeGonodeModulesFeedTemplatesNodesFeedIndexRssTpl, map[string]*bintree{}},
							}},
						}},
					}},
					"media": &bintree{nil, map[string]*bintree{
						"exif": &bintree{nil, map[string]*bintree{
							"2004-01-11-22-45-15-sep-2004-01-11-22-45-15a.jpg": &bintree{githubComRandeGonodeModulesMediaExif20040111224515Sep20040111224515aJpg, map[string]*bintree{}},
							"infinite_loop_exif.jpg": &bintree{githubComRandeGonodeModulesMediaExifInfinite_loop_exifJpg, map[string]*bintree{}},
						}},
					}},
					"prism": &bintree{nil, map[string]*bintree{
						"templates": &bintree{nil, map[string]*bintree{
							"layouts": &bintree{nil, map[string]*bintree{
								"base.tpl": &bintree{githubComRandeGonodeModulesPrismTemplatesLayoutsBaseTpl, map[string]*bintree{}},
								"error.tpl": &bintree{githubComRandeGonodeModulesPrismTemplatesLayoutsErrorTpl, map[string]*bintree{}},
							}},
							"pages": &bintree{nil, map[string]*bintree{
								"bad_request.tpl": &bintree{githubComRandeGonodeModulesPrismTemplatesPagesBad_requestTpl, map[string]*bintree{}},
								"internal_error.tpl": &bintree{githubComRandeGonodeModulesPrismTemplatesPagesInternal_errorTpl, map[string]*bintree{}},
								"not_found.tpl": &bintree{githubComRandeGonodeModulesPrismTemplatesPagesNot_foundTpl, map[string]*bintree{}},
							}},
						}},
					}},
					"search": &bintree{nil, map[string]*bintree{
						"templates": &bintree{nil, map[string]*bintree{
							"nodes": &bintree{nil, map[string]*bintree{
								"core.index.tpl": &bintree{githubComRandeGonodeModulesSearchTemplatesNodesCoreIndexTpl, map[string]*bintree{}},
							}},
						}},
					}},
					"setup": &bintree{nil, map[string]*bintree{
						"templates": &bintree{nil, map[string]*bintree{
							"core.setup.base.html.tpl": &bintree{githubComRandeGonodeModulesSetupTemplatesCoreSetupBaseHtmlTpl, map[string]*bintree{}},
							"definitions.toml": &bintree{githubComRandeGonodeModulesSetupTemplatesDefinitionsToml, map[string]*bintree{}},
						}},
					}},
				}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

